//通过合约来部署合约，通过代理合约去进行部署
//采用new来部署测试合约1

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.3;

contract TestContract1 {
    address public owner = msg.sender;

    function swtOwner(address _owner) public {
        require(msg.sender == owner, "not owner");
        owner = _owner;
    }
}

contract TestContract2 {
    address public owner = msg.sender;
    uint public value = msg.value;
    uint public x;
    uint public y;

    constructor(uint _x, uint _y) payable {
        x = _x;
        y = _y;
    }
}

contract Proxy {
    event Deploy(address);

    fallback() external payable { }

    function deploy(bytes memory _code) external payable returns (address) {
        address addr;
        bytes32 salt = keccak256(abi.encodePacked(_code));
        assembly {
            addr := create2(callvalue(), add(_code, 0x20), mload(_code), salt)
        }
        require(addr!= address(0), "deploy failed");
        emit Deploy(addr);
        return addr;
    }
//内联汇编

    function exexure(address _targer, bytes memory _data)
        external 
        payable 
    {
        (bool success, ) = _targer.call{value: msg.value}(_data);
        require(success, "failed");
    }
}

contract Helper {
    function getBytecode1() external pure returns (bytes memory) {
        bytes memory bytecode = type(TestContract1).creationCode;
        return bytecode;
    }

    function getBytecode2(uint _x, uint _y) external pure returns (bytes memory) {
        bytes memory bytecode = type(TestContract2).creationCode;
        return abi.encodePacked(bytecode, abi.encode(_x, _y));
    }

    function getCalldata(address _owner) external pure returns (bytes memory) {
        return abi.encodeWithSignature("swtOwner(address)", _owner);
    }
}
