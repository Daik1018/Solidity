
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

//结构体是能够将很多种变量格式打包组合一起的数据格式
contract Structs {

//叫汽车的结构体
        struct Car{
                string model;
//字符串，定义了汽车的型号
                uint year;
//定义了汽车的年份
                address owner;
//定义了汽车的拥有者
        }

        Car public car;
//结构体大写开头，变量小写开头
        Car[] public cars;
        mapping (address => Car[]) public carsByOwner;
//结构体类型定义一个映射

        function example() external {
                Car memory toyota = Car("Toyota",1990,msg.sender) ;
                Car memory lambo = Car({model:"Lamborghini",year:1980,owner : msg.sender});
                Car memory tesla;
                tesla.model = "Tesls";
                tesla.year = 2010;
                tesla.owner = msg.sender;
//局部变量

                cars.push(toyota);
                cars.push(lambo);
                cars.push(tesla);

 
 //推入和定义一起完成
                cars.push(Car("Ferrari",2020,msg.sender));

                Car storage  _car = cars[0];
                _car.model;
                _car.year = 1999;
//修改存储中状态变量的值

                delete _car.owner;
                delete cars[1];
//删除索引为1

        }
        
}


